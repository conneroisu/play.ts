var H=Math.PI,G=Math.PI*2,X=Math.PI/2,Y=Math.PI/4;var j=(1+Math.sqrt(5))/2;var k=(t,r)=>({x:t,y:r}),_=(t,r)=>({x:t.x+r.x,y:t.y+r.y}),E=(t,r)=>({x:t.x-r.x,y:t.y-r.y}),$=(t,r)=>({x:t.x*r===-0?0:t.x*r,y:t.y*r===-0?0:t.y*r});var J=(t)=>{let r=t.x*t.x+t.y*t.y;if(r===0)return k(0,0);if(!isFinite(r))return k(NaN,NaN);let o=Math.sqrt(r);return{x:t.x/o,y:t.y/o}},R=(t,r)=>{let o=t.x-r.x,x=t.y-r.y;return Math.sqrt(o*o+x*x)};var{sin:P,cos:Q}=Math;var A=Math.atan2;var F=Math.abs;var{min:h,max:f}=Math;var n=(t,r)=>({x:t,y:r}),N=(t,r)=>{return R(t,r)},O=(t,r)=>{let o=t.x-r.x,x=t.y-r.y;return o*o+x*x},D=(t,r,o)=>{return{x:t.x+(r.x-t.x)*o,y:t.y+(r.y-t.y)*o}},W=(t,r)=>{return A(r.y-t.y,r.x-t.x)},v=(t,r)=>({width:t,height:r}),S=(t)=>{return t.width*t.height},s=(t)=>{return 2*(t.width+t.height)},g=(t)=>{return t.width/t.height},B=(t,r)=>({width:t.width*r,height:t.height*r}),b=(t,r)=>{let o=h(r.width/t.width,r.height/t.height);return B(t,o)},y=(t,r)=>{let o=f(r.width/t.width,r.height/t.height);return B(t,o)},q=(t,r,o,x)=>({x:t,y:r,width:o,height:x}),d=(t,r)=>{let o=h(t.x,r.x),x=h(t.y,r.y),e=F(r.x-t.x),V=F(r.y-t.y);return q(o,x,e,V)},p=(t,r)=>{return q(t.x-r.width/2,t.y-r.height/2,r.width,r.height)},C=(t)=>{return n(t.x+t.width/2,t.y+t.height/2)},l=(t)=>{return n(t.x,t.y)},a=(t)=>{return n(t.x+t.width,t.y)},i=(t)=>{return n(t.x,t.y+t.height)},tt=(t)=>{return n(t.x+t.width,t.y+t.height)},rt=(t)=>{return t.width*t.height},ot=(t)=>{return 2*(t.width+t.height)},xt=(t,r)=>{return q(t.x-r,t.y-r,t.width+2*r,t.height+2*r)},et=(t,r)=>{let o=C(t),x=t.width*r,e=t.height*r;return q(o.x-x/2,o.y-e/2,x,e)},Vt=(t,r)=>{let o=h(t.x,r.x),x=h(t.y,r.y),e=f(t.x+t.width,r.x+r.width),V=f(t.y+t.height,r.y+r.height);return q(o,x,e-o,V-x)},Mt=(t,r)=>{let o=f(t.x,r.x),x=f(t.y,r.y),e=h(t.x+t.width,r.x+r.width),V=h(t.y+t.height,r.y+r.height);if(o>=e||x>=V)return null;return q(o,x,e-o,V-x)},K=(t,r,o)=>({x:t,y:r,radius:o}),ut=(t,r,o)=>{let{x,y:e}=t,V=r.x,M=r.y,u=o.x,m=o.y,I=2*(x*(M-m)+V*(m-e)+u*(e-M));if(F(I)<0.0000000001)return K(0,0,0);let z=((x*x+e*e)*(M-m)+(V*V+M*M)*(m-e)+(u*u+m*m)*(e-M))/I,L=((x*x+e*e)*(u-V)+(V*V+M*M)*(x-u)+(u*u+m*m)*(V-x))/I,U=N(n(z,L),t);return K(z,L,U)},T=(t)=>{return n(t.x,t.y)},nt=(t)=>{return H*t.radius*t.radius},mt=(t)=>{return G*t.radius},ht=(t,r)=>{return n(t.x+t.radius*Q(r),t.y+t.radius*P(r))},It=(t,r)=>{let o=N(T(t),r);return K(t.x,t.y,f(t.radius,o))},ft=(t,r)=>{return t.x>=r.x&&t.x<=r.x+r.width&&t.y>=r.y&&t.y<=r.y+r.height},Nt=(t,r)=>{return O(t,T(r))<=r.radius*r.radius},qt=(t,r)=>{return t.x<r.x+r.width&&t.x+t.width>r.x&&t.y<r.y+r.height&&t.y+t.height>r.y},Lt=(t,r)=>{return N(T(t),T(r))<=t.radius+r.radius},zt=(t,r)=>{let o=Math.max(r.x,Math.min(t.x,r.x+r.width)),x=Math.max(r.y,Math.min(t.y,r.y+r.height));return N(T(t),n(o,x))<=t.radius},Ft=(t,r)=>({start:t,end:r}),Et=(t)=>{return N(t.start,t.end)},Pt=(t)=>{return W(t.start,t.end)},Qt=(t,r)=>{return D(t.start,t.end,r)},Tt=(t)=>{let r=E(t.end,t.start),o=k(-r.y,r.x);return J(o)},Ut=(t)=>{return J(E(t.end,t.start))},kt=(t,r)=>{let o=E(t.end,t.start),x=E(r,t.start),e=o.x*x.x+o.y*x.y,V=o.x*o.x+o.y*o.y;if(V===0)return N(t.start,r);let M=Math.max(0,Math.min(1,e/V)),u=_(t.start,$(o,M));return N(u,r)},Gt=(t,r)=>{let o=t.start.x,x=t.start.y,e=t.end.x,V=t.end.y,M=r.start.x,u=r.start.y,m=r.end.x,I=r.end.y,z=(o-e)*(u-I)-(x-V)*(M-m);if(F(z)<0.0000000001)return null;let L=((o-M)*(u-I)-(x-u)*(M-m))/z,U=-((o-e)*(x-u)-(x-V)*(o-M))/z;if(L>=0&&L<=1&&U>=0&&U<=1)return n(o+L*(e-o),x+L*(V-x));return null},Ht=(...t)=>{if(t.length<3)throw new Error("Polygon must have at least 3 vertices");return t},Jt=(t)=>{let r=0,o=t.length;for(let x=0;x<o;x++){let e=(x+1)%o;r+=t[x].x*t[e].y,r-=t[e].x*t[x].y}return F(r)/2},Kt=(t)=>{let r=0,o=0,x=t.length;for(let e=0;e<x;e++)r+=t[e].x,o+=t[e].y;return n(r/x,o/x)},Zt=(t)=>{let r=0,o=t.length;for(let x=0;x<o;x++){let e=(x+1)%o;r+=N(t[x],t[e])}return r},_t=(t,r)=>{let o=!1,x=r.length;for(let e=0,V=x-1;e<x;V=e++){let M=r[e].x,u=r[e].y,m=r[V].x,I=r[V].y;if(u>t.y!==I>t.y&&t.x<(m-M)*(t.y-u)/(I-u)+M)o=!o}return o},$t=(t)=>{if(t.length===0)return q(0,0,0,0);let r=t[0].x,o=t[0].y,x=t[0].x,e=t[0].y;for(let V=1;V<t.length;V++)r=h(r,t[V].x),o=h(o,t[V].y),x=f(x,t[V].x),e=f(e,t[V].y);return q(r,o,x-r,e-o)},Z=(t,r,o,x=0)=>{if(o<3)throw new Error("Regular polygon must have at least 3 sides");let e=[],V=G/o;for(let M=0;M<o;M++){let u=M*V+x;e.push(n(t.x+r*Q(u),t.y+r*P(u)))}return e},Rt=(t,r,o,x)=>{let e=1-t;return n(e*e*r.x+2*e*t*o.x+t*t*x.x,e*e*r.y+2*e*t*o.y+t*t*x.y)},At=(t,r,o,x,e)=>{let V=1-t;return n(V*V*V*r.x+3*V*V*t*o.x+3*V*t*t*x.x+t*t*t*e.x,V*V*V*r.y+3*V*V*t*o.y+3*V*t*t*x.y+t*t*t*e.y)},Bt=(t,r)=>{let o=[],x=Math.floor(t.width/r),e=Math.floor(t.height/r);for(let V=0;V<=e;V++)for(let M=0;M<=x;M++)o.push(n(t.x+M*r,t.y+V*r));return o},Ot=(t,r,o)=>{let x=[t];for(let e=1;e<=o;e++)for(let V=0;V<6;V++)for(let M=0;M<e;M++){let u=(V*60+M*60/e)*H/180,m=e*r;x.push(n(t.x+m*Q(u),t.y+m*P(u)))}return x},Dt=(t,r,o)=>[t,r,o],Wt=(t,r)=>{let o=r/2;return[n(t.x-o,t.y-o),n(t.x+o,t.y-o),n(t.x+o,t.y+o),n(t.x-o,t.y+o)]},Ct=(t,r)=>{return Z(t,r,5)},Xt=(t,r)=>{return Z(t,r,6)},Yt=(t,r)=>{return Z(t,r,8)},jt=(t,r,o,x)=>{let e=[],V=G/(x*2);for(let M=0;M<x*2;M++){let u=M*V,m=M%2===0?r:o;e.push(n(t.x+m*Q(u),t.y+m*P(u)))}return e};export{Dt as triangle,jt as star,Wt as square,B as sizeScale,s as sizePerimeter,b as sizeFit,y as sizeFill,g as sizeAspectRatio,S as sizeArea,v as size,Z as regularPolygon,Vt as rectUnion,a as rectTopRight,l as rectTopLeft,et as rectScale,ot as rectPerimeter,qt as rectIntersects,Mt as rectIntersection,d as rectFromPoints,p as rectFromCenter,xt as rectExpand,C as rectCenter,tt as rectBottomRight,i as rectBottomLeft,rt as rectArea,q as rect,Rt as quadraticBezier,Zt as polygonPerimeter,Kt as polygonCentroid,$t as polygonBoundingBox,Jt as polygonArea,Ht as polygon,D as pointLerp,ft as pointInRect,_t as pointInPolygon,Nt as pointInCircle,O as pointDistanceSq,N as pointDistance,W as pointAngle,n as point,Ct as pentagon,Yt as octagon,Qt as linePointAt,Tt as lineNormal,Et as lineLength,Gt as lineIntersection,kt as lineDistanceToPoint,Ut as lineDirection,Pt as lineAngle,Ft as line,Xt as hexagon,Ot as hexGrid,Bt as gridPoints,At as cubicBezier,zt as circleRectIntersects,ht as circlePointAt,Lt as circleIntersects,ut as circleFromPoints,It as circleExpandToPoint,mt as circleCircumference,T as circleCenter,nt as circleArea,K as circle};
