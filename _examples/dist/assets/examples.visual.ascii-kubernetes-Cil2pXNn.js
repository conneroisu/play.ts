import{r as u,j as r,e as W,l as V}from"./index-BqTI3VMm.js";const re=function(){const B=u.useRef(null),E=u.useRef(0),w=u.useRef(new Map),$=u.useRef(new Map),j=u.useRef(new Map),P=u.useRef([]),[M,O]=u.useState(!0),[h,H]=u.useState(1),[x,q]=u.useState("cluster"),[v,G]=u.useState("default"),[R,Y]=u.useState("cpu"),[A,J]=u.useState(!0),[C,Q]=u.useState(!0),[g,X]=u.useState("kubernetes"),[F,Z]=u.useState("normal"),[z,se]=u.useState(!1),N={kubernetes:{bg:"#001122",master:"#326CE5",worker:"#4CAF50",running:"#00C851",pending:"#FF6900",failed:"#FF4444",service:"#2196F3",text:"#FFFFFF",network:"#9C27B0"},openshift:{bg:"#0F1419",master:"#EE0000",worker:"#CC0000",running:"#00AA00",pending:"#FFAA00",failed:"#FF0000",service:"#0066CC",text:"#FFFFFF",network:"#FF6600"},dark:{bg:"#000000",master:"#FFFFFF",worker:"#CCCCCC",running:"#00FF00",pending:"#FFFF00",failed:"#FF0000",service:"#00FFFF",text:"#FFFFFF",network:"#FF00FF"}},ee=["default","kube-system","monitoring","ingress","app-prod","app-staging"];return u.useEffect(()=>{const l=new Map,s=new Map,_=new Map,I={id:"master-1",name:"k8s-master-1",type:"master",status:"Ready",cpu_capacity:4e3,memory_capacity:8192,cpu_usage:500,memory_usage:2048,pod_count:8,max_pods:110,x:50,y:5,taints:["node-role.kubernetes.io/master:NoSchedule"],version:"v1.28.0",uptime:86400,conditions:["Ready","MemoryPressure=False","DiskPressure=False"]};l.set("master-1",I);for(let e=1;e<=3;e++){const a={id:`worker-${e}`,name:`k8s-worker-${e}`,type:"worker",status:"Ready",cpu_capacity:8e3,memory_capacity:16384,cpu_usage:Math.random()*4e3+1e3,memory_usage:Math.random()*8e3+2e3,pod_count:Math.floor(Math.random()*20)+5,max_pods:110,x:15+(e-1)*35,y:15,taints:[],version:"v1.28.0",uptime:86400-e*3600,conditions:["Ready","MemoryPressure=False","DiskPressure=False"]};l.set(`worker-${e}`,a)}const D=[{name:"kube-apiserver",namespace:"kube-system",node:"master-1"},{name:"kube-controller-manager",namespace:"kube-system",node:"master-1"},{name:"kube-scheduler",namespace:"kube-system",node:"master-1"},{name:"etcd",namespace:"kube-system",node:"master-1"},{name:"kube-proxy",namespace:"kube-system",node:"worker-1"},{name:"kube-proxy",namespace:"kube-system",node:"worker-2"},{name:"kube-proxy",namespace:"kube-system",node:"worker-3"},{name:"coredns",namespace:"kube-system",node:"worker-1"},{name:"coredns",namespace:"kube-system",node:"worker-2"}],U=[{name:"web-frontend",namespace:"default",replicas:3},{name:"api-backend",namespace:"default",replicas:2},{name:"database",namespace:"default",replicas:1},{name:"redis-cache",namespace:"default",replicas:1},{name:"nginx-ingress",namespace:"ingress",replicas:2},{name:"prometheus",namespace:"monitoring",replicas:1},{name:"grafana",namespace:"monitoring",replicas:1}];let S=0,k=25;D.forEach(e=>{const a=l.get(e.node);if(!a)return;const c={id:`${e.name}-${S++}`,name:e.name,namespace:e.namespace,node:e.node,status:"Running",ready:!0,restarts:Math.floor(Math.random()*3),age:Math.random()*86400,cpu_usage:Math.random()*200+50,memory_usage:Math.random()*512+128,x:a.x-5,y:k,labels:{app:e.name,tier:"system"},containers:[{name:e.name,image:`k8s.gcr.io/${e.name}:v1.28.0`,status:"Running",ready:!0,restart_count:0}],phase_transition:0};s.set(c.id,c),k+=2});const T=Array.from(l.values()).filter(e=>e.type==="worker");k=25,U.forEach(e=>{for(let a=0;a<e.replicas;a++){const c=T[Math.floor(Math.random()*T.length)],t={id:`${e.name}-${a}-${S++}`,name:`${e.name}-${a}`,namespace:e.namespace,node:c.id,status:Math.random()>.95?"Pending":"Running",ready:Math.random()>.1,restarts:Math.floor(Math.random()*5),age:Math.random()*172800,cpu_usage:Math.random()*500+100,memory_usage:Math.random()*1024+256,x:c.x+a%3*8,y:k+Math.floor(a/3)*2,labels:{app:e.name,version:"v1.0.0"},containers:[{name:e.name,image:`app/${e.name}:latest`,status:"Running",ready:!0,restart_count:Math.floor(Math.random()*3)}],phase_transition:0};s.set(t.id,t)}k+=4}),[{name:"kubernetes",namespace:"default",type:"ClusterIP",ip:"10.96.0.1"},{name:"web-service",namespace:"default",type:"LoadBalancer",ip:"10.96.1.100"},{name:"api-service",namespace:"default",type:"ClusterIP",ip:"10.96.1.101"},{name:"database-service",namespace:"default",type:"ClusterIP",ip:"10.96.1.102"},{name:"redis-service",namespace:"default",type:"ClusterIP",ip:"10.96.1.103"},{name:"nginx-ingress",namespace:"ingress",type:"NodePort",ip:"10.96.2.100"},{name:"prometheus",namespace:"monitoring",type:"ClusterIP",ip:"10.96.3.100"}].forEach((e,a)=>{const c={id:`svc-${a}`,name:e.name,namespace:e.namespace,type:e.type,cluster_ip:e.ip,external_ip:e.type==="LoadBalancer"?"192.168.1.100":"<none>",ports:["80:30080/TCP"],endpoints:[],selector:{app:e.name},traffic_flow:Math.random()*100};_.set(c.id,c)}),$.current=l,w.current=s,j.current=_},[]),u.useEffect(()=>{const l=B.current;if(!l)return;const s=l.getContext("2d");if(!s)return;const _=()=>{l.width=l.offsetWidth,l.height=l.offsetHeight},I=()=>{const e=w.current,a=$.current,c=j.current;if(e.forEach(t=>{F==="rolling-update"&&Math.random()<.01*h?t.status==="Running"&&(t.status="Pending",t.phase_transition=30):F==="node-failure"&&t.node==="worker-1"?(t.status="Failed",t.ready=!1):F==="resource-pressure"&&(t.cpu_usage=Math.min(1e3,t.cpu_usage+Math.random()*50),t.memory_usage=Math.min(2048,t.memory_usage+Math.random()*100)),t.status==="Running"&&(t.cpu_usage=W(t.cpu_usage+(Math.random()-.5)*20,10,t.namespace==="kube-system"?500:1e3),t.memory_usage=W(t.memory_usage+(Math.random()-.5)*50,64,t.namespace==="kube-system"?1024:2048)),t.phase_transition>0&&(t.phase_transition--,t.phase_transition===0&&t.status==="Pending"&&(t.status="Running",t.ready=!0)),t.age+=h}),a.forEach(t=>{F==="node-failure"&&t.id==="worker-1"?(t.status="NotReady",t.conditions=["Ready=False","NetworkUnavailable=True"]):t.status="Ready";const n=Array.from(e.values()).filter(i=>i.node===t.id);t.pod_count=n.length,t.cpu_usage=n.reduce((i,m)=>i+m.cpu_usage,0),t.memory_usage=n.reduce((i,m)=>i+m.memory_usage,0),t.uptime+=h}),c.forEach(t=>{t.traffic_flow=W(t.traffic_flow+(Math.random()-.5)*10,0,200)}),Math.random()<.15*h&&C){const t=Array.from(e.values()).filter(i=>i.status==="Running"),n=Array.from(c.values());if(t.length>0&&n.length>0){const i=t[Math.floor(Math.random()*t.length)],m=n[Math.floor(Math.random()*n.length)];P.current.push({id:`flow-${i.id}-${m.id}-${Date.now()}`,from_pod:i.id,to_service:m.id,progress:0,type:Math.random()<.6?"http":Math.random()<.8?"grpc":"tcp",latency:Math.random()*50+5,status_code:Math.random()<.95?200:Math.random()<.5?404:500})}}P.current=P.current.filter(t=>(t.progress+=.04*h,t.progress<1))},D=(e,a)=>e.status==="Failed"?a.failed:e.status==="Pending"||!e.ready?a.pending:a.running,U=(e,a)=>{const c=e.x*a,t=e.y*a,n=N[g];s.fillStyle=D(e,n);const i=e.phase_transition>0?"◐":e.status==="Running"?"●":e.status==="Pending"?"◯":e.status==="Failed"?"✕":"◐";if(s.fillText(i,c,t),s.fillStyle=n.text,s.fillText(e.name,c+a,t),(x==="detailed"||e.namespace!==v)&&(s.fillStyle=n.text+"80",s.fillText(`[${e.namespace}]`,c+a*12,t)),x==="detailed"){const m=R==="cpu"?e.cpu_usage:e.memory_usage,y=R==="cpu"?"m":"Mi",b=R==="cpu"?1e3:2048,p=8,f=m/b,o=Math.floor(f*p);s.fillStyle=n.text+"40",s.fillText("█".repeat(p),c,t+a),o>0&&(s.fillStyle=f>.8?n.failed:f>.6?n.pending:n.running,s.fillText("█".repeat(o),c,t+a)),s.fillStyle=n.text,s.fillText(`${m.toFixed(0)}${y}`,c+(p+1)*a,t+a)}e.restarts>0&&(s.fillStyle=n.pending,s.fillText(`R:${e.restarts}`,c+a*18,t))},S=(e,a)=>{const c=e.x*a,t=e.y*a,n=N[g],i=20,m=e.type==="master"?8:12;s.strokeStyle=e.type==="master"?n.master:n.worker,s.lineWidth=2,s.strokeRect(c-a,t-a,i*a,m*a),s.fillStyle=e.type==="master"?n.master:n.worker;const y=e.type==="master"?"⚡":"⚙";s.fillText(y,c-a*.5,t-a*.5),s.fillStyle=n.text,s.fillText(e.name,c,t);const b=e.status==="Ready"?n.running:e.status==="NotReady"?n.failed:n.pending;s.fillStyle=b,s.fillText(e.status,c+a*10,t),s.fillStyle=n.text;const p=(e.cpu_usage/e.cpu_capacity*100).toFixed(0),f=(e.memory_usage/e.memory_capacity*100).toFixed(0);s.fillText(`CPU: ${p}%`,c,t+a*1.5),s.fillText(`MEM: ${f}%`,c,t+a*2.5),s.fillText(`Pods: ${e.pod_count}/${e.max_pods}`,c,t+a*3.5),s.fillStyle=n.text+"80",s.fillText(e.version,c+a*10,t+a*1.5),s.fillText(`${Math.floor(e.uptime/3600)}h`,c+a*10,t+a*2.5)},k=(e,a,c,t)=>{const n=N[g];if(s.fillStyle=n.service,s.fillText("◇",a,c),s.fillStyle=n.text,s.fillText(`${e.name} (${e.type})`,a+t,c),e.traffic_flow>0){const i=Math.floor(e.traffic_flow/20);s.fillStyle=n.network,s.fillText("▶".repeat(Math.min(5,i)),a+t*15,c)}},T=e=>{if(!C)return;const a=w.current,c=j.current,t=N[g];P.current.forEach(n=>{const i=a.get(n.from_pod);if(c.get(n.to_service),!i)return;const m=i.x*e,y=i.y*e,b=l.width-200+Math.random()*100,p=100+Math.random()*100,f=V(m,b,n.progress),o=V(y,p,n.progress);let d=t.network;n.status_code>=400?d=t.failed:n.status_code>=300&&(d=t.pending),s.fillStyle=d,s.fillText("●",f,o),s.strokeStyle=d+"30",s.lineWidth=1,s.setLineDash([2,4]),s.beginPath(),s.moveTo(m,y),s.lineTo(b,p),s.stroke(),s.setLineDash([])})},K=()=>{if(!M)return;const e=N[g],a=12;if(s.fillStyle=e.bg,s.fillRect(0,0,l.width,l.height),s.font='12px "Courier New", monospace',s.textBaseline="top",Math.random()<.08*h&&I(),$.current.forEach(o=>{S(o,a)}),(x==="namespace"?Array.from(w.current.values()).filter(o=>o.namespace===v):Array.from(w.current.values())).forEach(o=>{U(o,a)}),A){let o=50;(x==="namespace"?Array.from(j.current.values()).filter(L=>L.namespace===v):Array.from(j.current.values())).forEach(L=>{k(L,l.width-300,o,a),o+=a*2})}T(a);const t=Array.from(w.current.values()),n=Array.from($.current.values()),i=t.filter(o=>o.status==="Running").length,m=t.filter(o=>o.status==="Pending").length,y=t.filter(o=>o.status==="Failed").length,b=n.filter(o=>o.status==="Ready").length,p=n.reduce((o,d)=>o+d.cpu_usage,0),f=n.reduce((o,d)=>o+d.memory_usage,0);if(s.fillStyle=e.text,s.fillText(`Kubernetes Cluster Dashboard - ${x.toUpperCase()} VIEW`,10,l.height-120),s.fillText(`Nodes: ${b}/${n.length} Ready | Total CPU: ${p.toFixed(0)}m | Memory: ${(f/1024).toFixed(1)}Gi`,10,l.height-105),s.fillText(`Pods: ${i} Running | ${m} Pending | ${y} Failed | Total: ${t.length}`,10,l.height-90),s.fillText(`Network Flows: ${P.current.length} active | Simulation: ${F}`,10,l.height-75),x==="namespace"){const o=t.filter(d=>d.namespace===v);s.fillText(`Namespace: ${v} (${o.length} pods)`,10,l.height-60)}E.current=requestAnimationFrame(K)};return _(),window.addEventListener("resize",_),M&&K(),()=>{window.removeEventListener("resize",_),E.current&&cancelAnimationFrame(E.current)}},[M,h,x,v,R,A,C,g,F,z]),r.jsxs("div",{className:"flex flex-col h-screen bg-black",children:[r.jsxs("div",{className:"flex-shrink-0 bg-gray-900 p-4 border-b border-gray-700",children:[r.jsx("h1",{className:"text-2xl font-bold text-blue-400 mb-4",children:"☸️ ASCII Kubernetes Cluster Monitor"}),r.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4 text-sm mb-4",children:[r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Animation"}),r.jsx("button",{onClick:()=>O(!M),className:`px-3 py-2 rounded font-medium transition-colors ${M?"bg-red-600 hover:bg-red-700 text-white":"bg-green-600 hover:bg-green-700 text-white"}`,children:M?"Pause":"Play"})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsxs("label",{className:"text-blue-300 mb-2",children:["Speed: ",h.toFixed(1),"x"]}),r.jsx("input",{type:"range",min:"0.1",max:"3",step:"0.1",value:h,onChange:l=>H(Number.parseFloat(l.target.value)),className:"w-full"})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"View Mode"}),r.jsxs("select",{value:x,onChange:l=>q(l.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"cluster",children:"Full Cluster"}),r.jsx("option",{value:"namespace",children:"Namespace View"}),r.jsx("option",{value:"detailed",children:"Detailed View"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Namespace"}),r.jsx("select",{value:v,onChange:l=>G(l.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",disabled:x!=="namespace",children:ee.map(l=>r.jsx("option",{value:l,children:l},l))})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Display Metric"}),r.jsxs("select",{value:R,onChange:l=>Y(l.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"cpu",children:"CPU Usage"}),r.jsx("option",{value:"memory",children:"Memory Usage"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Color Scheme"}),r.jsxs("select",{value:g,onChange:l=>X(l.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"kubernetes",children:"Kubernetes Blue"}),r.jsx("option",{value:"openshift",children:"OpenShift Red"}),r.jsx("option",{value:"dark",children:"Dark Terminal"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Simulation"}),r.jsxs("select",{value:F,onChange:l=>Z(l.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"normal",children:"Normal Operations"}),r.jsx("option",{value:"rolling-update",children:"Rolling Update"}),r.jsx("option",{value:"node-failure",children:"Node Failure"}),r.jsx("option",{value:"resource-pressure",children:"Resource Pressure"})]})]}),r.jsxs("div",{className:"flex flex-col gap-2",children:[r.jsxs("label",{className:"flex items-center text-blue-300 text-xs",children:[r.jsx("input",{type:"checkbox",checked:A,onChange:l=>J(l.target.checked),className:"mr-1"}),"Services"]}),r.jsxs("label",{className:"flex items-center text-blue-300 text-xs",children:[r.jsx("input",{type:"checkbox",checked:C,onChange:l=>Q(l.target.checked),className:"mr-1"}),"Network Flow"]})]})]}),r.jsxs("div",{className:"mt-4 text-blue-400 text-sm",children:[r.jsxs("p",{children:["☸️ ",r.jsx("strong",{children:"Kubernetes cluster monitoring"})," with real-time pod scheduling and lifecycle management!"]}),r.jsxs("p",{children:["🚀 ",r.jsx("strong",{children:"Simulate cluster events"})," - rolling updates, node failures, and resource pressure scenarios!"]}),r.jsxs("p",{children:["🌐 ",r.jsx("strong",{children:"Network visualization"})," with service mesh traffic flows and inter-pod communication!"]}),r.jsx("p",{children:"Monitor master/worker nodes, system/application pods, services across multiple namespaces with live metrics"})]})]}),r.jsx("div",{className:"flex-1 relative",children:r.jsx("canvas",{ref:B,className:"absolute inset-0 w-full h-full",style:{background:N[g].bg}})})]})};export{re as component};
