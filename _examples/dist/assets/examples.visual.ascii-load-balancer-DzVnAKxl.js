import{r as o,j as n}from"./index-BqTI3VMm.js";const M=function(){const g=o.useRef(null),f=o.useRef(),[m,y]=o.useState(!1),h=o.useRef(!1),s=o.useRef([{id:1,load:0,status:"healthy",activeConnections:0},{id:2,load:0,status:"healthy",activeConnections:0},{id:3,load:0,status:"healthy",activeConnections:0},{id:4,load:0,status:"healthy",activeConnections:0}]),c=o.useRef([]),x=o.useRef(1),R=o.useRef(0);o.useEffect(()=>{const e=g.current;if(!e)return;const a=e.getContext("2d");if(!a)return;e.width=800,e.height=600,a.font="12px monospace";const i=d=>{h.current&&(d-R.current>200+Math.random()*300&&(T(),R.current=d),C(),v(),j(a),f.current=requestAnimationFrame(i))};return h.current&&(f.current=requestAnimationFrame(i)),()=>{f.current&&cancelAnimationFrame(f.current)}},[m]);const T=()=>{const e=["api","static","db"],a=e[Math.floor(Math.random()*e.length)],i=s.current.filter(l=>l.status==="healthy");if(i.length===0)return;const d=i.reduce((l,u)=>l.load<u.load?l:u).id,t={id:x.current++,x:50,y:200+Math.random()*200,targetServer:d,progress:0,type:a};c.current.push(t)},C=()=>{c.current=c.current.filter(e=>{if(e.progress+=.02,e.x=50+600*e.progress,e.progress>=1){const a=s.current.find(i=>i.id===e.targetServer);return a&&(a.activeConnections=Math.max(0,a.activeConnections-1)),!1}if(e.progress>.8&&e.progress<.85){const a=s.current.find(i=>i.id===e.targetServer);a&&a.activeConnections++}return!0})},v=()=>{s.current.forEach(e=>{e.load=Math.min(100,e.activeConnections*15+Math.random()*10),e.load>80?e.status="overloaded":(e.load>60,e.status="healthy"),Math.random()<.001&&(e.status="down",setTimeout(()=>{s.current.find(a=>a.id===e.id)&&(e.status="healthy",e.load=0,e.activeConnections=0)},3e3))})},j=e=>{e.fillStyle="#000",e.fillRect(0,0,800,600),e.fillStyle="#00ff00",e.fillText("ASCII Load Balancer - Real-time Traffic Distribution",20,30),e.fillStyle="#ffff00",e.fillText("┌─ LOAD BALANCER ─┐",20,80),e.fillText("│  Round Robin    │",20,100),e.fillText("│  Health Check   │",20,120),e.fillText("└─────────────────┘",20,140),s.current.forEach((t,l)=>{const r=100+l*100;let p="#00ff00";t.status==="overloaded"&&(p="#ff8800"),t.status==="down"&&(p="#ff0000"),e.fillStyle=p,e.fillText(`┌─ SERVER ${t.id} ─┐`,500,r),e.fillText(`│ Load: ${t.load.toFixed(0)}%  │`,500,r+20),e.fillText(`│ Conn: ${t.activeConnections.toString().padStart(2)}    │`,500,r+40),e.fillText(`│ ${t.status.toUpperCase().padEnd(9)} │`,500,r+60),e.fillText("└─────────────┘",500,r+80);const b=Math.floor(t.load/10),w="█".repeat(b)+"░".repeat(10-b);e.fillText(`[${w}]`,650,r+20)}),c.current.forEach(t=>{const l={api:"#00ffff",static:"#ff00ff",db:"#ffff00"};e.fillStyle=l[t.type];const u=t.type==="api"?"●":t.type==="static"?"◆":"▲";if(e.fillText(u,t.x,t.y),t.progress>.1){const r=120+(t.targetServer-1)*100;e.strokeStyle=l[t.type],e.setLineDash([2,2]),e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(500,r),e.stroke(),e.setLineDash([])}}),e.fillStyle="#ffffff";const a=c.current.length,i=s.current.reduce((t,l)=>t+l.load,0)/s.current.length,d=s.current.filter(t=>t.status==="healthy").length;e.fillText("─ METRICS ─",20,200),e.fillText(`Requests in flight: ${a}`,20,220),e.fillText(`Average load: ${i.toFixed(1)}%`,20,240),e.fillText(`Healthy servers: ${d}/4`,20,260),e.fillText("─ LEGEND ─",20,320),e.fillStyle="#00ffff",e.fillText("● API Request",20,340),e.fillStyle="#ff00ff",e.fillText("◆ Static File",20,360),e.fillStyle="#ffff00",e.fillText("▲ Database Query",20,380),e.fillStyle="#888888",e.fillText("Algorithm: Least Connections with Health Checks",20,420),e.fillText("Health Check: Load > 80% = Overloaded",20,440),e.fillText("Failover: Routes around down servers",20,460)},A=()=>{y(!0),h.current=!0},S=()=>{y(!1),h.current=!1,f.current&&cancelAnimationFrame(f.current)},L=()=>{S(),s.current.forEach(e=>{e.load=0,e.status="healthy",e.activeConnections=0}),c.current=[],x.current=1};return n.jsxs("div",{className:"p-6 max-w-4xl mx-auto",children:[n.jsx("h1",{className:"text-3xl font-bold mb-4",children:"ASCII Load Balancer"}),n.jsx("p",{className:"text-gray-600 mb-6",children:"Real-time visualization of load balancer distributing traffic across multiple servers using least-connections algorithm with health monitoring."}),n.jsxs("div",{className:"mb-4 space-x-2",children:[n.jsx("button",{onClick:A,disabled:m,className:"px-4 py-2 bg-green-500 text-white rounded disabled:bg-gray-400",children:"Start Load Balancer"}),n.jsx("button",{onClick:S,disabled:!m,className:"px-4 py-2 bg-red-500 text-white rounded disabled:bg-gray-400",children:"Stop"}),n.jsx("button",{onClick:L,className:"px-4 py-2 bg-blue-500 text-white rounded",children:"Reset"})]}),n.jsx("canvas",{ref:g,style:{border:"1px solid #ccc",backgroundColor:"#000",maxWidth:"100%",height:"auto"}}),n.jsxs("div",{className:"mt-4 text-sm text-gray-600",children:[n.jsx("p",{children:n.jsx("strong",{children:"Features:"})}),n.jsxs("ul",{className:"list-disc list-inside",children:[n.jsx("li",{children:"Least-connections load balancing algorithm"}),n.jsx("li",{children:"Real-time health monitoring and status updates"}),n.jsx("li",{children:"Automatic failover when servers are overloaded or down"}),n.jsx("li",{children:"Different request types (API, Static, Database)"}),n.jsx("li",{children:"Live metrics and performance indicators"})]})]})]})};export{M as component};
