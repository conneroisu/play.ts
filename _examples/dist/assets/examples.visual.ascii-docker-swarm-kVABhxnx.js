import{r as d,j as r,e as P,l as H}from"./index-BqTI3VMm.js";const ae=function(){const B=d.useRef(null),W=d.useRef(0),j=d.useRef(new Map),C=d.useRef(new Map),T=d.useRef(new Map),S=d.useRef([]),[N,O]=d.useState(!0),[w,q]=d.useState(1),[y,K]=d.useState("cluster"),[$,Y]=d.useState("manager-1"),[E,G]=d.useState("cpu"),[U,J]=d.useState(!0),[D,Q]=d.useState(!0),[v,X]=d.useState("docker"),[k,Z]=d.useState("normal"),[A,z]=d.useState("manual"),F={docker:{bg:"#0B1426",manager:"#2496ED",worker:"#0DB7ED",running:"#00C851",unhealthy:"#FF4444",updating:"#FF9500",service:"#FF6900",text:"#FFFFFF",network:"#9B59B6"},swarm:{bg:"#1A1A2E",manager:"#16213E",worker:"#0F3460",running:"#E94560",unhealthy:"#FF4757",updating:"#FFA502",service:"#3742FA",text:"#FFFFFF",network:"#2ED573"},production:{bg:"#000000",manager:"#00FF00",worker:"#00AA00",running:"#FFFF00",unhealthy:"#FF0000",updating:"#FF8800",service:"#00FFFF",text:"#FFFFFF",network:"#FF00FF"}};return d.useEffect(()=>{const n=new Map,a=new Map,M=new Map;for(let o=1;o<=3;o++){const g={id:`manager-${o}`,name:`docker-manager-${o}`,role:"manager",status:"ready",availability:"active",manager_status:o===1?"leader":"reachable",cpu_cores:4,memory_total:8192,cpu_usage:Math.random()*2e3+500,memory_usage:Math.random()*4e3+1e3,containers_running:0,containers_total:0,x:10+(o-1)*30,y:5,engine_version:"24.0.7",os:"linux",arch:"x86_64",last_seen:Date.now()};n.set(`manager-${o}`,g)}for(let o=1;o<=5;o++){const g={id:`worker-${o}`,name:`docker-worker-${o}`,role:"worker",status:"ready",availability:"active",manager_status:"none",cpu_cores:8,memory_total:16384,cpu_usage:Math.random()*4e3+1e3,memory_usage:Math.random()*8e3+2e3,containers_running:0,containers_total:0,x:5+(o-1)*20,y:15,engine_version:"24.0.7",os:"linux",arch:"x86_64",last_seen:Date.now()};n.set(`worker-${o}`,g)}[{name:"web-frontend",replicas:3,image:"nginx:alpine",ports:["80:8080"]},{name:"api-backend",replicas:2,image:"node:alpine",ports:["3000:3000"]},{name:"database",replicas:1,image:"postgres:15",ports:["5432:5432"]},{name:"redis-cache",replicas:1,image:"redis:alpine",ports:["6379:6379"]},{name:"load-balancer",replicas:2,image:"haproxy:alpine",ports:["80:80","443:443"]},{name:"monitoring",replicas:1,image:"prom/prometheus",ports:["9090:9090"]},{name:"log-aggregator",replicas:1,image:"elasticsearch:7.17",ports:["9200:9200"]}].forEach((o,g)=>{const f={id:`service-${g}`,name:o.name,mode:"replicated",replicas_desired:o.replicas,replicas_running:o.replicas,image:o.image,ports:o.ports,networks:["overlay-network","ingress"],update_status:"none",placement_constraints:[],labels:{"com.docker.stack.namespace":"production"},created:Date.now()-Math.random()*864e5,updated:Date.now()-Math.random()*36e5};M.set(f.id,f)});let I=0;const R=Array.from(n.values()).filter(o=>o.role==="worker");M.forEach(o=>{for(let g=0;g<o.replicas_running;g++){const f=R[Math.floor(Math.random()*R.length)],t={id:`container-${I++}`,name:`${o.name}.${g}.${Math.random().toString(36).substr(2,8)}`,image:o.image,status:Math.random()>.95?"restarting":"running",health:Math.random()>.9?"unhealthy":Math.random()>.8?"starting":"healthy",node_id:f.id,service_id:o.id,cpu_usage:Math.random()*200+50,memory_usage:Math.random()*512+128,memory_limit:1024,network_io:Math.random()*1e3+100,disk_io:Math.random()*500+50,uptime:Math.random()*172800,restart_count:Math.floor(Math.random()*5),x:f.x+g%4*4,y:f.y+3+Math.floor(g/4)*2,ports:o.ports,volumes:[`${o.name}-data:/data`],env_vars:{NODE_ENV:"production",SERVICE_NAME:o.name},labels:{"com.docker.swarm.service.name":o.name}};a.set(t.id,t),f.containers_running++,f.containers_total++}}),C.current=n,j.current=a,T.current=M},[]),d.useEffect(()=>{const n=B.current;if(!n)return;const a=n.getContext("2d");if(!a)return;const M=()=>{n.width=n.offsetWidth,n.height=n.offsetHeight},V=()=>{const t=j.current,l=C.current,c=T.current;if(t.forEach(e=>{if(k==="rolling-update")Math.random()<.02*w?(e.status="restarting",e.health="starting"):e.status==="restarting"&&Math.random()<.3&&(e.status="running",e.health="healthy",e.restart_count++);else if(k==="high-load")e.cpu_usage=Math.min(800,e.cpu_usage+Math.random()*50),e.memory_usage=Math.min(e.memory_limit*.9,e.memory_usage+Math.random()*100),e.network_io+=Math.random()*200;else if(k==="node-failure"){const s=l.get(e.node_id);s&&s.id==="worker-1"&&(e.status="exited",e.health="unhealthy")}e.status==="running"&&(e.cpu_usage=P(e.cpu_usage+(Math.random()-.5)*20,10,800),e.memory_usage=P(e.memory_usage+(Math.random()-.5)*50,64,e.memory_limit*.95),e.network_io=P(e.network_io+(Math.random()-.5)*100,0,5e3),e.disk_io=P(e.disk_io+(Math.random()-.5)*50,0,2e3)),e.memory_usage>e.memory_limit*.9||e.cpu_usage>700?e.health="unhealthy":e.health==="unhealthy"&&Math.random()<.1&&(e.health="healthy"),e.uptime+=w}),l.forEach(e=>{k==="node-failure"&&e.id==="worker-1"?(e.status="down",e.availability="drain"):(e.status="ready",e.availability="active");const s=Array.from(t.values()).filter(u=>u.node_id===e.id);e.containers_running=s.filter(u=>u.status==="running").length,e.containers_total=s.length,e.cpu_usage=s.reduce((u,m)=>u+m.cpu_usage,0),e.memory_usage=s.reduce((u,m)=>u+m.memory_usage,0),e.last_seen=Date.now()}),c.forEach(e=>{const s=Array.from(t.values()).filter(u=>u.service_id===e.id);if(e.replicas_running=s.filter(u=>u.status==="running").length,A==="auto"&&e.name==="web-frontend"){const u=s.reduce((m,h)=>m+h.cpu_usage,0)/s.length;u>600&&e.replicas_running<5?(e.replicas_desired++,e.update_status="updating"):u<200&&e.replicas_running>1&&(e.replicas_desired--,e.update_status="updating")}e.replicas_running<e.replicas_desired?e.update_status="updating":e.update_status==="updating"&&(e.update_status="completed"),e.updated=Date.now()}),Math.random()<.12*w&&D){const e=Array.from(t.values()).filter(s=>s.status==="running");if(e.length>1){const s=e[Math.floor(Math.random()*e.length)],u=e[Math.floor(Math.random()*e.length)];s.id!==u.id&&S.current.push({id:`flow-${s.id}-${u.id}-${Date.now()}`,from_container:s.id,to_container:u.id,progress:0,type:Math.random()<.5?"http":Math.random()<.7?"tcp":"overlay",bytes_per_sec:Math.random()*1e3+100,protocol:Math.random()<.6?"HTTP/1.1":"TCP"})}}S.current=S.current.filter(e=>(e.progress+=.05*w,e.progress<1))},I=(t,l)=>t.status==="exited"||t.status==="dead"?l.unhealthy:t.status==="restarting"?l.updating:t.health==="unhealthy"?l.unhealthy:t.health==="starting"?l.updating:l.running,L=(t,l)=>{const c=t.x*l,e=t.y*l,s=F[v];a.fillStyle=I(t,s);const u=t.status==="running"?"▣":t.status==="restarting"?"↻":t.status==="exited"?"◇":"▢";a.fillText(u,c,e),a.fillStyle=s.text;const m=t.name.length>12?t.name.substring(0,12)+"...":t.name;if(a.fillText(m,c+l,e),t.health==="unhealthy"?(a.fillStyle=s.unhealthy,a.fillText("⚠",c-l,e)):t.health==="starting"&&(a.fillStyle=s.updating,a.fillText("◐",c-l,e)),y==="detailed"||y==="node"){let h=0,p="",x=100;switch(E){case"cpu":h=t.cpu_usage,p="m",x=1e3;break;case"memory":h=t.memory_usage,p="MB",x=t.memory_limit;break;case"network":h=t.network_io,p="KB/s",x=5e3;break}const _=6,i=h/x,b=Math.floor(i*_);a.fillStyle=s.text+"40",a.fillText("█".repeat(_),c,e+l),b>0&&(a.fillStyle=i>.8?s.unhealthy:i>.6?s.updating:s.running,a.fillText("█".repeat(b),c,e+l)),a.fillStyle=s.text,a.fillText(`${h.toFixed(0)}${p}`,c+(_+1)*l,e+l)}t.restart_count>0&&(a.fillStyle=s.updating,a.fillText(`R:${t.restart_count}`,c+l*14,e))},R=(t,l)=>{const c=t.x*l,e=t.y*l,s=F[v],u=t.role==="manager"?25:18,m=10;a.strokeStyle=t.role==="manager"?s.manager:s.worker,a.lineWidth=2,a.strokeRect(c-l,e-l,u*l,m*l),a.fillStyle=t.role==="manager"?s.manager:s.worker;const h=t.role==="manager"?"👑":"⚙";if(a.fillText(h,c-l*.5,e-l*.5),t.role==="manager"){a.fillStyle=t.manager_status==="leader"?s.running:s.updating;const i=t.manager_status==="leader"?"★":"●";a.fillText(i,c+l*17,e-l*.5)}a.fillStyle=s.text,a.fillText(t.name,c,e);const p=t.status==="ready"?s.running:t.status==="down"?s.unhealthy:s.updating;a.fillStyle=p,a.fillText(t.status.toUpperCase(),c+l*10,e),a.fillStyle=s.text;const x=(t.cpu_usage/(t.cpu_cores*1e3)*100).toFixed(0),_=(t.memory_usage/t.memory_total*100).toFixed(0);a.fillText(`CPU: ${x}%`,c,e+l*1.5),a.fillText(`MEM: ${_}%`,c,e+l*2.5),a.fillText(`Containers: ${t.containers_running}/${t.containers_total}`,c,e+l*3.5),a.fillStyle=s.text+"80",a.fillText(`Docker ${t.engine_version}`,c+l*10,e+l*1.5),t.availability!=="active"&&(a.fillStyle=s.updating,a.fillText(t.availability.toUpperCase(),c+l*10,e+l*2.5))},o=(t,l,c,e)=>{const s=F[v];a.fillStyle=s.service;const u=t.update_status==="updating"?"↻":t.replicas_running<t.replicas_desired?"⚠":"◆";a.fillText(u,l,c),a.fillStyle=s.text,a.fillText(`${t.name} (${t.replicas_running}/${t.replicas_desired})`,l+e,c),t.update_status!=="none"&&(a.fillStyle=t.update_status==="updating"?s.updating:s.running,a.fillText(t.update_status.toUpperCase(),l+e*18,c)),a.fillStyle=s.text+"80",a.fillText(t.mode,l,c+e)},g=t=>{if(!D)return;const l=j.current,c=F[v];S.current.forEach(e=>{const s=l.get(e.from_container),u=l.get(e.to_container);if(!s||!u)return;const m=s.x*t,h=s.y*t,p=u.x*t,x=u.y*t,_=H(m,p,e.progress),i=H(h,x,e.progress);let b=c.network;e.type==="overlay"?b=c.manager:e.type==="tcp"&&(b=c.worker),a.fillStyle=b,a.fillText("●",_,i),a.strokeStyle=b+"30",a.lineWidth=1,a.setLineDash([1,3]),a.beginPath(),a.moveTo(m,h),a.lineTo(p,x),a.stroke(),a.setLineDash([])})},f=()=>{if(!N)return;const t=F[v],l=10;if(a.fillStyle=t.bg,a.fillRect(0,0,n.width,n.height),a.font='10px "Courier New", monospace',a.textBaseline="top",Math.random()<.1*w&&V(),C.current.forEach(i=>{y==="node"&&i.id!==$||R(i,l)}),(y==="node"?Array.from(j.current.values()).filter(i=>i.node_id===$):Array.from(j.current.values())).forEach(i=>{L(i,l)}),U){let i=50;T.current.forEach(b=>{o(b,n.width-350,i,l),i+=l*3})}g(l);const e=Array.from(j.current.values()),s=Array.from(C.current.values()),u=Array.from(T.current.values()),m=e.filter(i=>i.status==="running").length,h=e.filter(i=>i.health==="unhealthy").length,p=s.filter(i=>i.status==="ready").length,x=s.filter(i=>i.role==="manager"&&i.status==="ready").length,_=u.filter(i=>i.update_status==="updating").length;if(a.fillStyle=t.text,a.fillText(`Docker Swarm Cluster Dashboard - ${y.toUpperCase()} VIEW`,10,n.height-120),a.fillText(`Nodes: ${p}/${s.length} Ready | Managers: ${x}/3 | Workers: ${p-x}`,10,n.height-105),a.fillText(`Containers: ${m} Running | ${h} Unhealthy | Total: ${e.length}`,10,n.height-90),a.fillText(`Services: ${u.length} Total | ${_} Updating | Flows: ${S.current.length}`,10,n.height-75),a.fillText(`Simulation: ${k} | Scaling: ${A} | Display: ${E}`,10,n.height-60),y==="node"){const i=C.current.get($);i&&a.fillText(`Viewing: ${i.name} (${i.containers_running} containers)`,10,n.height-45)}W.current=requestAnimationFrame(f)};return M(),window.addEventListener("resize",M),N&&f(),()=>{window.removeEventListener("resize",M),W.current&&cancelAnimationFrame(W.current)}},[N,w,y,$,E,U,D,v,k,A]),r.jsxs("div",{className:"flex flex-col h-screen bg-black",children:[r.jsxs("div",{className:"flex-shrink-0 bg-gray-900 p-4 border-b border-gray-700",children:[r.jsx("h1",{className:"text-2xl font-bold text-blue-400 mb-4",children:"🐳 ASCII Docker Swarm Monitor"}),r.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4 text-sm mb-4",children:[r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Animation"}),r.jsx("button",{onClick:()=>O(!N),className:`px-3 py-2 rounded font-medium transition-colors ${N?"bg-red-600 hover:bg-red-700 text-white":"bg-green-600 hover:bg-green-700 text-white"}`,children:N?"Pause":"Play"})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsxs("label",{className:"text-blue-300 mb-2",children:["Speed: ",w.toFixed(1),"x"]}),r.jsx("input",{type:"range",min:"0.1",max:"3",step:"0.1",value:w,onChange:n=>q(Number.parseFloat(n.target.value)),className:"w-full"})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"View Mode"}),r.jsxs("select",{value:y,onChange:n=>K(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"cluster",children:"Full Cluster"}),r.jsx("option",{value:"node",children:"Single Node"}),r.jsx("option",{value:"detailed",children:"Detailed View"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Selected Node"}),r.jsxs("select",{value:$,onChange:n=>Y(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",disabled:y!=="node",children:[r.jsx("option",{value:"manager-1",children:"Manager 1"}),r.jsx("option",{value:"manager-2",children:"Manager 2"}),r.jsx("option",{value:"manager-3",children:"Manager 3"}),r.jsx("option",{value:"worker-1",children:"Worker 1"}),r.jsx("option",{value:"worker-2",children:"Worker 2"}),r.jsx("option",{value:"worker-3",children:"Worker 3"}),r.jsx("option",{value:"worker-4",children:"Worker 4"}),r.jsx("option",{value:"worker-5",children:"Worker 5"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Display Metric"}),r.jsxs("select",{value:E,onChange:n=>G(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"cpu",children:"CPU Usage"}),r.jsx("option",{value:"memory",children:"Memory Usage"}),r.jsx("option",{value:"network",children:"Network I/O"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Color Scheme"}),r.jsxs("select",{value:v,onChange:n=>X(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"docker",children:"Docker Blue"}),r.jsx("option",{value:"swarm",children:"Swarm Purple"}),r.jsx("option",{value:"production",children:"Production Terminal"})]})]}),r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Simulation"}),r.jsxs("select",{value:k,onChange:n=>Z(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"normal",children:"Normal Operations"}),r.jsx("option",{value:"rolling-update",children:"Rolling Update"}),r.jsx("option",{value:"high-load",children:"High Load"}),r.jsx("option",{value:"node-failure",children:"Node Failure"})]})]}),r.jsxs("div",{className:"flex flex-col gap-2",children:[r.jsxs("label",{className:"flex items-center text-blue-300 text-xs",children:[r.jsx("input",{type:"checkbox",checked:U,onChange:n=>J(n.target.checked),className:"mr-1"}),"Services"]}),r.jsxs("label",{className:"flex items-center text-blue-300 text-xs",children:[r.jsx("input",{type:"checkbox",checked:D,onChange:n=>Q(n.target.checked),className:"mr-1"}),"Networking"]})]})]}),r.jsx("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4",children:r.jsxs("div",{className:"flex flex-col",children:[r.jsx("label",{className:"text-blue-300 mb-2",children:"Scaling Mode"}),r.jsxs("select",{value:A,onChange:n=>z(n.target.value),className:"px-2 py-1 bg-gray-800 text-blue-300 rounded border border-gray-600",children:[r.jsx("option",{value:"manual",children:"Manual Scaling"}),r.jsx("option",{value:"auto",children:"Auto Scaling"})]})]})}),r.jsxs("div",{className:"mt-4 text-blue-400 text-sm",children:[r.jsxs("p",{children:["🐳 ",r.jsx("strong",{children:"Docker Swarm orchestration"})," with real-time container lifecycle and service management!"]}),r.jsxs("p",{children:["🔄 ",r.jsx("strong",{children:"Simulate cluster operations"})," - rolling updates, scaling events, and node failures!"]}),r.jsxs("p",{children:["🌐 ",r.jsx("strong",{children:"Container networking"})," with overlay networks and inter-service communication flows!"]}),r.jsx("p",{children:"Monitor manager/worker nodes, containerized services, health checks across distributed Swarm cluster"})]})]}),r.jsx("div",{className:"flex-1 relative",children:r.jsx("canvas",{ref:B,className:"absolute inset-0 w-full h-full",style:{background:F[v].bg}})})]})};export{ae as component};
